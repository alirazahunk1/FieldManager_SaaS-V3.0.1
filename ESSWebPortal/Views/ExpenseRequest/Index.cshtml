@model IEnumerable<ESSDataAccess.Models.ExpenseRequestModel>
@inject IDbSettings _settings;
@{
    ViewData["Title"] = "Expense Requests";
    var apiBaseUrl = await _settings.GetApiBaseUrl();
}

@section Styles{
    <link href="~/plugins/bootstrap-daterangepicker/daterangepicker.css" rel="stylesheet" />
}
<div class="card shadow">
    <div class="card-header">
        @*  <div class="row">
        <!-- Date and time range -->
        <div class="col input-group">
        <button type="button" class="btn btn-default float-right" id="daterange">
        <i class="far fa-calendar-alt"></i> <span id="daterangeplaceholder">Date range picker</span>
        <i class="fas fa-caret-down"></i>
        </button>
        </div>
        </div>*@

        <div class="float-start">
            <h4>@ViewData["Title"]</h4>
        </div>
    </div>
    <div class="card-body">
        <table id="datatable" class="table">
            <thead>
                <tr>
                    <th>
                        @Html.DisplayNameFor(model => model.Id)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.User)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Approvedby)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.ApprovedOn)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Amount)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.ApprovedAmount)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.ExpenseType)
                    </th>
                    <th>
                        Proof
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Status)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Remarks)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.CreatedAt)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.UpdatedAt)
                    </th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.Id)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.User.FirstName)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Approvedby)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.ApprovedOn)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Amount)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.ApprovedAmount)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.ExpenseType.Name)
                        </td>
                        <td>
                            @if (!string.IsNullOrEmpty(item.ImgUrl))
                            {
                                <img height="100" src="@(apiBaseUrl  + item.ImgUrl)">
                            }
                        </td>
                        <td>
                            @if (item.Status == ExpenseStatusEnum.Approved)
                            {
                                <span class="badge bg-success">@Html.DisplayFor(modelItem => item.Status)</span>
                            }
                            else if (item.Status == ExpenseStatusEnum.Rejected)
                            {
                                <span class="badge bg-danger">@Html.DisplayFor(modelItem => item.Status)</span>
                            }
                            else
                            {
                                <span class="badge bg-warning">@Html.DisplayFor(modelItem => item.Status)</span>

                            }
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Remarks)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.CreatedAt)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.UpdatedAt)
                        </td>
                        <td class="d-flex flex-row">

                            @if (item.Status == ExpenseStatusEnum.Pending)
                            {
                                <div class="d-flex flex-row">
                                    <div class="p-1"><a data-bs-toggle="tooltip" data-bs-placement="top" title="Approve" class="btn btn-success" asp-action="Approve" asp-route-id="@item.Id" asp-route-id=@item.Id><i class="fa fa-check"></i></a></div>
                                    <div class="p-1"><a data-bs-toggle="tooltip" data-bs-placement="top" title="Reject" class="btn btn-danger" asp-action="UpdateStatus" asp-route-id="@item.Id" asp-route-status="reject"><i class="fa fa-times"></i></a></div>
                                </div>
                            }
                            <div class="p-1"><a data-bs-toggle="tooltip" data-bs-placement="top" title="Details" class="btn btn-secondary" asp-action="Details" asp-route-id="@item.Id"><i class="fa fa-eye"></i></a></div>
                            @if (item.Status != ExpenseStatusEnum.Approved && item.Status != ExpenseStatusEnum.Rejected)
                            {
                                <div class="p-1"><a data-bs-toggle="tooltip" data-bs-placement="top" title="Delete" class="btn btn-danger" asp-action="Delete" asp-route-id="@item.Id"><i class="fa fa-trash"></i></a></div>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
@section Scripts{
    <script src="~/plugins/bootstrap-daterangepicker/daterangepicker.js"></script>
    <script>


        $(document).ready(function () {

            $("img").click(function () { this.requestFullscreen() });

            var now = moment();

            $('#daterangeplaceholder').html(now.format('MMMM D, YYYY') + ' - ' + now.format('MMMM D, YYYY'))

            //Date range as a button
            $('#daterange').daterangepicker(
                {
                    ranges: {
                        'Today': [moment(), moment()],
                        'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                        'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                        'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                        'This Month': [moment().startOf('month'), moment().endOf('month')],
                        'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
                    },
                    startDate: moment().subtract(29, 'days'),
                    endDate: moment()
                },
                function (start, end) {
                    $('#daterangeplaceholder').html(start.format('MMMM D, YYYY') + ' - ' + end.format('MMMM D, YYYY'))
                }
            )
        });

    </script>
}